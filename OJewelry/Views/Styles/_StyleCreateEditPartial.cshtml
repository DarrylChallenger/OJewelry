@using OJewelry.Models
@model OJewelry.Models.StyleViewModel
    
<div class="StyleSheetPartial">
    @*@Html.ValidationSummary(false, "", htmlAttributes: new { @class = "text-danger" })*@
    <div class="row StyleHeader ">
        @Html.HiddenFor(model => model.Style.Quantity)
        @Html.HiddenFor(model => model.Style.RetailPrice)
        <div class="col-sm-7 col-xs-7 StyleLeftHeader">
            <!-- style left header-->
            <div class="row">
                @Html.LabelFor(model => model.Style.StyleNum, htmlAttributes: new { @class = "control-label col-sm-4 col-xs-4" })
                <div class="col-sm-6 col-xs-6">
                    @if (Model.SVMOp == OJewelry.Models.SVMOperation.Create || Model.SVMOp == OJewelry.Models.SVMOperation.Edit)
                    {
                        @Html.EditorFor(model => model.Style.StyleNum, new { htmlAttributes = new { @class = "width100", placeholder = "Style Number" } })
                    }
                    @if (Model.SVMOp == OJewelry.Models.SVMOperation.Print)
                    {
                        @Html.DisplayFor(model => model.Style.StyleNum, new { htmlAttributes = new { @class = "" } })
                    }
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(model => model.Style.StyleName, htmlAttributes: new { @class = "control-label col-sm-4 col-xs-4" })
                <div class="col-sm-6 col-xs-6">
                    @if (@Model.SVMOp == SVMOperation.Print)
                    {
                        @Html.DisplayFor(model => model.Style.StyleName, new { @class = "control-label col-sm-2 col-xs-2" })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.Style.StyleName, new { htmlAttributes = new { @class = "width100", placeholder = "Style Name" } })
                    }
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(model => model.Style.Desc, htmlAttributes: new { @class = "control-label col-sm-4 col-xs-4" })
                <div class="col-sm-6 col-xs-6">
                    @if (@Model.SVMOp == SVMOperation.Print)
                    {
                        @Html.DisplayFor(model => model.Style.Desc, new { htmlAttributes = new { @class = "" } })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.Style.Desc, new { htmlAttributes = new { @class = "width100" } })
                    }
                </div>
            </div>
            <div class="row">
                @Html.HiddenFor(model => model.Style.JewelryType.bUseLaborTable)
                @Html.HiddenFor(model => model.Style.JewelryType.Name)
                @Html.LabelFor(model => model.Style.JewelryTypeId, htmlAttributes: new { @class = "control-label col-sm-4 col-xs-4" })
                <div class="col-sm-4 col-xs-4">
                    @if (@Model.SVMOp == SVMOperation.Print)
                    {
                        @Model.Style.JewelryType.Name
                    }
                    else
                    {
                        //@Html.DropDownList("JewelryTypeId", null, "Choose a Jewelry Type", htmlAttributes: new { @class = "width100 ", onchange = "JewelryTypeChanged(" + Model.CompanyId + ")" })
                        @Html.DropDownListFor(model => model.Style.JewelryTypeId, new SelectList(Model.drpJewelryTypes, "Id","Name", Model.Style.JewelryTypeId),
                               "Choose a Jewelry Type", htmlAttributes: new { @class = "width100 ", onchange = "JewelryTypeChanged(" + Model.CompanyId + ")" })
                    }
                </div>
            </div>
            <div class="row">
                @Html.LabelFor(model => model.Style.CollectionId, htmlAttributes: new { @class = "control-label col-sm-4 col-xs-4" })
                <div class="col-sm-4 col-xs-4">
                    @if (@Model.SVMOp == SVMOperation.Print)
                    {
                        @Model.Style.Collection.Name
                    }
                    else
                    {
                        @Html.DropDownList("CollectionId", null, htmlAttributes: new { @class = "width100" })
                    }
                </div>
            </div>
        </div>
        <div class="col-sm-5 col-xs-5 StyleRightHeader">
            <!-- style right header-->
            @Html.HiddenFor((model => model.Style.Image))
            @{var imgurl = (Model.Style != null && Model.Style.Image != null) ? Model.Style.Image : "/Images/logo.png"; }
            <img src="@imgurl" class="StyleImage centerImage bor" />
            @*<input class="StyleLoadBtn " type="file"  />*@
            @Html.TextBoxFor(model => model.PostedImageFile, new { @class = "StyleLoadBtn bordered", type = "file" })

        </div> <!-- style right header-->

    </div>
    @Html.ValidationMessageFor(model => model.Style.StyleNum, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.StyleName, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.Desc, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.JewelryTypeId, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.CollectionId, "", new { @class = "text-danger" })
    <div class="row StyleBodyBoundingBox">
        <div class="row">
            <div class="col-sm-1 col-xs-1"></div>
            <div class="col-sm-7 col-xs-7 bold">
                <p>MEASUREMENTS:</p>
            </div>
            <div class="col-sm-3 col-xs-3">
                @if (Model.SVMOp != SVMOperation.Print)
                {
                    @Html.LabelFor(model => model.Style.IntroDate, htmlAttributes: new { @class = "control-label" })
                }
                else
                {
                <span class="boxfull">
                    @Html.LabelFor(model => model.Style.IntroDate, htmlAttributes: new { @class = "control-label" })
                    @if (Model.Style.IntroDate.HasValue)
                    {
                        <text>: </text>
                        @Model.Style.IntroDate.Value.ToShortDateString()
                    }
                </span>
                }
            </div>
            <div class="">
                @if (@Model.SVMOp != SVMOperation.Print)
                {
                    <span class="col-sm-3 col-xs-3">
                        @{
                            var dateyr = Model.Style.IntroDate.GetValueOrDefault().Year;
                            var datemo = Model.Style.IntroDate.GetValueOrDefault().Month.ToString("D2");
                            var datedt = Model.Style.IntroDate.GetValueOrDefault().Day.ToString("D2");
                            <input name="Style.IntroDate" class="text-box single-line" id="Style_IntroDate" type="date" data-val-date="The field INTRO DATE must be a date."
                                   value="@dateyr-@datemo-@datedt" />
                        }
                    </span>
                }
            </div>
        </div>
        <div class="row">
            @if (@Model.SVMOp == SVMOperation.Print)
            {
                <div class="col-sm-1 col-xs-1"></div>
                <div class="col-sm-2 col-xs-2">
                    <span class="boxfull">
                        @Html.LabelFor(model => model.Style.Length, new { @class = "" })
                        <text>:</text>
                        &nbsp;@Html.DisplayFor(model => model.Style.Length, new { htmlAttributes = new { @class = "boxfull" } })&nbsp;
                    </span>
                    <text> &nbsp;&nbsp;&nbsp;</text>
                </div>
                <div class="col-sm-2 col-xs-2">
                    @Html.LabelFor(model => model.Style.Width, new { @class = "" })
                    <text>:</text>
                    <span class="boxfull">
                        &nbsp;@Html.DisplayFor(model => model.Style.Width, new { htmlAttributes = new { @class = "boxfull" } })&nbsp;
                    </span>
                    <text> &nbsp;&nbsp;&nbsp;&nbsp;</text>

                </div>
                <div class="col-sm-3 col-xs-3"></div>
                <div class="col-sm-3 col-xs-3">
                    @Html.LabelFor(model => model.Style.ChainLength, new { @class = "" })
                    <text>:</text>
                    <span class="boxfull">
                        &nbsp;@Html.DisplayFor(model => model.Style.ChainLength, new { htmlAttributes = new { @class = "boxfull" } })&nbsp;
                    </span>
                    <text> &nbsp;&nbsp;&nbsp;&nbsp;</text>
                </div>

                    }
                    else
                    {
                    @Html.LabelFor(model => model.Style.Length, new { @class = "col-sm-1 col-xs-1" });
                    @Html.EditorFor(model => model.Style.Length, new { htmlAttributes = new { @class = "col-sm-2 col-xs-2" } });
                    }
                    <div class="">
                        @if (@Model.SVMOp == SVMOperation.Print)
                        {
                        }
                        else
                        {
                            @Html.LabelFor(model => model.Style.Width, new { @class = "col-sm-1 col-xs-1" })
                            @Html.EditorFor(model => model.Style.Width, new { htmlAttributes = new { @class = "col-sm-2 col-xs-2" } })
                        }
                    </div>
                    <div>
                        @if (@Model.SVMOp == SVMOperation.Print)
                        {
                        }
                        else
                        {
                            @Html.LabelFor(model => model.Style.ChainLength, new { @class = "col-sm-2 col-xs-2" })
                            @Html.EditorFor(model => model.Style.ChainLength, new { htmlAttributes = new { @class = "col-sm-2 col-xs-2" } })
                        }
                    </div>
                </div>
        <div class="row">

            @if (@Model.SVMOp == SVMOperation.Print)
            {
                <div class="col-sm-1 col-xs-1"></div>
                <div class="col-sm-2 col-xs-2">
                    <span class="boxfull">
                        @Html.LabelFor(model => model.Style.MetalWeight, null, htmlAttributes: new { @class = "control-label" })
                        <text>&nbsp;</text>
                        <span>
                            &nbsp;@Html.DisplayFor(model => model.Style.MetalWeight, new { htmlAttributes = new { @class = "" } })&nbsp;
                        </span>
                        <text>&nbsp;</text>
                        @Model.Style.MetalWeightUnit.Unit
                        <text>&nbsp;</text>

                    </span>
                </div>
                <div class="col-sm-2 col-xs-2">

                </div>
                <div class="col-sm-3 col-xs-3"></div>
                <div class="col-sm-3 col-xs-3">
                    <span class="">
                        @Html.LabelFor(model => model.Style.MetalWtNote, null, htmlAttributes: new { @class = "" }):
                        <span class="boxfull">
                            &nbsp;@Html.DisplayFor(model => model.Style.MetalWtNote, new { htmlAttributes = new { @class = "" } })&nbsp;
                        </span>
                    </span>

                </div>
            }
            else
            {
                <div class="col-sm-2 col-xs-2">
                    @Html.LabelFor(model => model.Style.MetalWeight, null, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-sm-2 col-xs-2">
                    @Html.EditorFor(model => model.Style.MetalWeight, new { htmlAttributes = new { @class = "" } })
                </div>
            }
            <div class="col-sm-2 col-xs-2">
                @if (@Model.SVMOp != SVMOperation.Print)
                {
                    @Html.DropDownList("MetalWtUnitId", null, htmlAttributes: new { @class = "" })
                }
            </div>
            <div>
                @if (@Model.SVMOp != SVMOperation.Print)
                {
                    <div class="col-sm-1 col-xs-1">
                        @Html.LabelFor(model => model.Style.MetalWtNote, null, htmlAttributes: new { @class = "" })
                    </div>
                    <div class="col-sm-4 col-xs-4">
                        @Html.EditorFor(model => model.Style.MetalWtNote, new { htmlAttributes = new { @class = "width100" } })
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div>

    @Html.ValidationMessageFor(model => model.Style.MetalWeight, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.IntroDate, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.Length, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.RetailPrice, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.Width, "", new { @class = "text-danger" })
    @Html.ValidationMessageFor(model => model.Style.ChainLength, "", new { @class = "text-danger" })
    
    <span class="text-danger hidden">
        @foreach (KeyValuePair<string, ModelState> p in @ViewData.ModelState)
        {
            if (p.Value.Errors.Count != 0)
            {
                // display name and error
                foreach (ModelError e in p.Value.Errors)
                {
                    <span>@e.ErrorMessage</span>
                }
            }
        }
    </span>
</div> <!-- Validation -->


