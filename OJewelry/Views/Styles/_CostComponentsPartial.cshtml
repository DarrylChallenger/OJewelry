@model OJewelry.Models.StyleViewModel
@using OJewelry.Models

<div>
    COST
    <div class="styleCastings">
        <!-- Castings -->
        <div class="row StyleComponentsRowHeader">
            @{Model.CCLastRow = false; Model.CCHeaderRow = true; Model.CCRowIndex = -1; Model.SVMCCType = SVMCCTypeEnum.Castings;}
            @if (Model.Castings.Count == 0) { Model.CCLastRow = true; }
            @Html.Partial("_CostComponentCol1", Model)
            <div class="col-sm-2">METAL STYLE</div>
            <div class="col-sm-1"></div>
            <div class="col-sm-2">VENDOR</div>
            <div class="col-sm-1">METAL</div>
            <div class="col-sm-1">PRICE</div>
            <div class="col-sm-1">LABOR</div>
            <div class="col-sm-1">QTY</div>
            <div class="col-sm-2">TOTAL COST</div>
        </div>
        <div>
            @for (int i = 0; i < Model.Castings.Count; i++) // where state != deleted
            {
                Model.i = i;
                OJewelry.Models.CastingComponent c = Model.Castings[i];
                <div class="CastingsState">@Html.HiddenFor(model => model.Castings[i].SVMState)</div>
                var bHideRow = (Model.Castings[i].SVMState == SVMStateEnum.Unadded || Model.Castings[i].SVMState == SVMStateEnum.Deleted) ? "hidden" : "";
                <div id="CastingsRow_@i" class="CastingsRow @bHideRow">
                    <div class="row ltbordered">
                        @{Model.CCLastRow = false; Model.CCHeaderRow = false; Model.CCRowIndex = i;}
                        @if (i == Model.Castings.Count - 1) { Model.CCLastRow = true; }
                        @Html.HiddenFor(model => model.Castings[i].Id)
                        @Html.Partial("_CostComponentCol1", Model)
                        @Html.EditorFor(model => model.Castings[i].Name, new { htmlAttributes = new { @class = "col-sm-2 requiredifnotremoved" } })
                        <div class="col-sm-1"></div>
                        @Html.DropDownListFor(model => model.Castings[i].VendorId, Model.Castings[i].VendorList, new { @class = "col-sm-2" })
                        @Html.DropDownListFor(model => model.Castings[i].MetalCodeId, Model.Castings[i].MetalCodes, new { @class = "col-sm-1" })
                        @Html.EditorFor(model => model.Castings[i].Price, new { htmlAttributes = new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" } })
                        @Html.EditorFor(model => model.Castings[i].Labor, new { htmlAttributes = new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" } })
                        @Html.TextBoxFor(model => model.Castings[i].Qty, new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" })
                        <div id="CastingsRowTotalValue_@i" class="col-sm-1 CastingsRowTotal ">@Model.Castings[i].Total.ToString("F02")</div>
                        <div class="col-sm-1">
                            @Html.Partial("_CostComponentLastCol", Model)
                        </div>
                    </div>
                    <div class="row">
                        <!--Validations Here-->
                        @Html.ValidationMessageFor(model => model.Castings[i].Name, "", new { @class = "text-danger" })
                        @Html.ValidationMessageFor(model => model.Castings[i].Price, "", new { @class = "text-danger" })
                        @Html.ValidationMessageFor(model => model.Castings[i].Labor, "", new { @class = "text-danger" })
                        @Html.ValidationMessageFor(model => model.Castings[i].Qty, "", new { @class = "text-danger" })
                    </div>
                </div>
                            }
            <div id="CastingsTotal">
                <div class="row StyleComponentsRowFooter">
                    <div class="col-sm-2"><b>TOTAL CASTINGS</b></div>
                    <div class="col-sm-8"></div>
                    <div id="CastingsTotalValue" class="col-sm-2">@Model.MetalsTotal.ToString("F02")</div>
                </div>
            </div>
        </div>
    </div> <!-- Castings-->

    <div class="styleStones">
        <div class="row StyleComponentsRowHeader">
            @{Model.CCLastRow = false; Model.CCHeaderRow = true; Model.CCRowIndex = -1; Model.SVMCCType = SVMCCTypeEnum.Stones;}
            @if (Model.Stones.Count == 0) { Model.CCLastRow = true; }
            @Html.Partial("_CostComponentCol1", Model)
            <div class="col-sm-2">STONES</div>
            <div class="col-sm-1">SHAPE</div>
            <div class="col-sm-1">SIZE</div>
            <div class="col-sm-1">CT</div>
            <div class="col-sm-2">VENDOR</div>
            <div class="col-sm-1">PRICE</div>
            <div class="col-sm-1">QTY</div>
            <div class="col-sm-2">TOTAL COST</div>
        </div>
        @for (int i = 0; i < Model.Stones.Count; i++)
        {
            Model.i = i;
            OJewelry.Models.StoneComponent c = Model.Stones[i];
            <div class="StonesState">@Html.HiddenFor(model => model.Stones[i].SVMState)</div>
            var bHideRow = (Model.Stones[i].SVMState == SVMStateEnum.Unadded || Model.Stones[i].SVMState == SVMStateEnum.Deleted) ? "hidden" : "";
            <div id="StonesRow_@i" class="StonesRow @bHideRow">
                <div class="row ltbordered">
                    @{Model.CCLastRow = false; Model.CCHeaderRow = false; Model.CCRowIndex = i;}
                    @if (i == Model.Stones.Count - 1) { Model.CCLastRow = true; }
                    @Html.HiddenFor(model => model.Stones[i].Id)
                    @Html.HiddenFor(model => model.Stones[i].linkId)
                    @Html.Partial("_CostComponentCol1", Model)
                    @*<div class="col-sm-2 ">@c.Name </div>*@
                    @if (Model.Stones[i].Id == 0)
                    {
                        @Html.DropDownListFor(model => model.Stones[i].Name, Model.Stones[i].StoneList, "You must select a stone", new { @class = "col-sm-2 requiredifnotremoved", onchange = "StoneChanged('" + i + "')" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Stones[i].Name, Model.Stones[i].StoneList, new { @class = "col-sm-2 requiredifnotremoved", onchange = "StoneChanged('" + i + "')" })
                    }
                    @if (Model.Stones[i].ShapeId == 0)
                    {
                        @Html.DropDownListFor(model => model.Stones[i].ShId, Model.Stones[i].ShapeList, "You must select a shape", new { @class = "col-sm-1 requiredifnotremoved" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Stones[i].ShId, Model.Stones[i].ShapeList, new { @class = "col-sm-1 requiredifnotremoved" })
                    }
                    @if (Model.Stones[i].Size == "")
                    {
                        @Html.DropDownListFor(model => model.Stones[i].SzId, Model.Stones[i].SizeList, "You must select a size", new { @class = "col-sm-1 requiredifnotremoved" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Stones[i].SzId, Model.Stones[i].SizeList, new { @class = "col-sm-1 requiredifnotremoved" })
                    }
                    @Html.EditorFor(model => model.Stones[i].CtWt, new { htmlAttributes = new { @class = "col-sm-1 locked", @disabled = "disabled" } })
                    @Html.EditorFor(model => model.Stones[i].VendorName, new { htmlAttributes = new { @class = "col-sm-2 locked", @disabled = "disabled" } })
                    @Html.EditorFor(model => model.Stones[i].Price, new { htmlAttributes = new { @class = "col-sm-1 locked", @disabled = "disabled" } })
                    @Html.TextBoxFor(model => model.Stones[i].Qty, new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" })
                    <div id="StonesRowTotalValue_@i" class="col-sm-1 StonesRowTotal ">@Model.Stones[i].Total.ToString("F02")</div>
                    <div class="col-sm-1">
                        @Html.Partial("_CostComponentLastCol", Model)
                    </div>

                </div>

                <div class="row">
                    @Html.ValidationMessageFor(model => model.Stones[i].Id, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Stones[i].Qty, "", new { @class = "text-danger" })
                </div>
            </div>
                        }
        <div id="StonesTotal">
            <div class="row StyleComponentsRowFooter">
                <div class="col-sm-2"><b>TOTAL STONES</b></div>
                <div class="col-sm-8"></div>
                <div id="StonesTotalValue" class="col-sm-2">@Model.StonesTotal.ToString("F02")</div>
            </div>
        </div>
    </div> <!--Stones-->

    <div class="styleFindings">
        <!-- Findings -->
        <div class="row StyleComponentsRowHeader">
            @{Model.CCLastRow = false; Model.CCHeaderRow = true; Model.CCRowIndex = -1; Model.SVMCCType = SVMCCTypeEnum.Findings; }
            @if (Model.Findings.Count == 0) { Model.CCLastRow = true; }
            @Html.Partial("_CostComponentCol1", Model)
            <div class="col-sm-2">FINDINGS</div>
            <div class="col-sm-2 "></div>
            <div class="col-sm-2">VENDOR</div>
            <div class="col-sm-1">WT</div>
            <div class="col-sm-1">PRICE</div>
            <div class="col-sm-1">QTY</div>
            <div class="col-sm-2">TOTAL</div>
        </div>
        @for (int i = 0; i < Model.Findings.Count; i++)
        {
            Model.i = i;
            OJewelry.Models.FindingsComponent c = Model.Findings[i];
            <div class="FindingsState">@Html.HiddenFor(model => model.Findings[i].SVMState)</div>
            var bHideRow = (Model.Findings[i].SVMState == SVMStateEnum.Unadded || Model.Findings[i].SVMState == SVMStateEnum.Deleted) ? "hidden" : "";
            <div id="FindingsRow_@i" class="FindingsRow @bHideRow">
                <div class="row ltbordered">
                    @{Model.CCLastRow = false; Model.CCHeaderRow = false; Model.CCRowIndex = i;}
                    @if (i == Model.Findings.Count - 1) { Model.CCLastRow = true; }
                    @Html.HiddenFor(model => model.Findings[i].linkId)
                    @Html.Partial("_CostComponentCol1", Model)
                    @if (Model.Findings[i].Id == 0)
                    {
                        @Html.DropDownListFor(model => model.Findings[i].Id, Model.Findings[i].CompList, "You must select a finding", new { @class = "col-sm-2 requiredifnotremoved", onchange = "FindingChanged('" + i + "')" })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.Findings[i].Id, Model.Findings[i].CompList, new { @class = "col-sm-2 requiredifnotremoved", onchange = "FindingChanged('" + i + "')" })
                    }
                    <div class="col-sm-2 "></div>
                    @Html.EditorFor(model => model.Findings[i].VendorName, new { htmlAttributes = new { @class = "col-sm-2 locked", @disabled = "disabled" } })
                    @Html.EditorFor(model => model.Findings[i].Weight, new { htmlAttributes = new { @class = "col-sm-1 locked", @disabled = "disabled" } })
                    @Html.EditorFor(model => model.Findings[i].Price, new { htmlAttributes = new { @class = "col-sm-1 locked", @disabled = "disabled" } })
                    @Html.TextBoxFor(model => model.Findings[i].Qty, new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" })
                    <div id="FindingsRowTotalValue_@i" class="col-sm-1 FindingsRowTotal ">@Model.Findings[i].Total.ToString("F02")</div>
                    <div class="col-sm-1">
                        @Html.Partial("_CostComponentLastCol", Model)
                    </div>

                </div>
                <div class="row">
                    @Html.ValidationMessageFor(model => model.Findings[i].Id, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Findings[i].Qty, "", new { @class = "text-danger" })
                </div>
            </div>
                        }
        <div id="FindingsTotal">
            <div class="row StyleComponentsRowFooter">
                <div class="col-sm-2"><b>TOTAL FINDINGS</b></div>
                <div class="col-sm-8"></div>
                <div id="FindingsTotalValue" class="col-sm-2">@Model.FindingsTotal.ToString("F02")</div>
            </div>
        </div>
    </div> <!-- Findings -->

    <div class="styleLabors">
        <!-- Labor -->
        <div class="row StyleComponentsRowHeader">
            @{Model.CCLastRow = false; Model.CCHeaderRow = true; Model.CCRowIndex = -1; Model.SVMCCType = SVMCCTypeEnum.Labors; }
            @if (Model.Labors.Count == 0) { Model.CCLastRow = true; }
            @Html.Partial("_CostComponentCol1")
            <div class="col-sm-2">LABOR</div>
            <div class="col-sm-2 ">Desc</div>
            <div class="col-sm-2"></div>
            <div class="col-sm-1">PRICE/HR</div>
            <div class="col-sm-1">PRICE/PC</div>
            <div class="col-sm-1">QTY</div>
            <div class="col-sm-2">TOTAL</div>
        </div>
        @for (int i = 0; i < Model.Labors.Count; i++)
        {
            Model.i = i;
            OJewelry.Models.LaborComponent c = Model.Labors[i];
            <div class="LaborsState">@Html.HiddenFor(model => model.Labors[i].SVMState)</div>
            var bHideRow = (Model.Labors[i].SVMState == SVMStateEnum.Unadded || Model.Labors[i].SVMState == SVMStateEnum.Deleted) ? "hidden" : "";
            <div id="LaborsRow_@i" class="LaborsRow @bHideRow">
                <div class="row ltbordered">
                    @{Model.CCLastRow = false; Model.CCHeaderRow = false; Model.CCRowIndex = i;}
                    @if (i == Model.Labors.Count - 1) { Model.CCLastRow = true; }
                    @Html.HiddenFor(model => model.Labors[i].Id)
                    @Html.Partial("_CostComponentCol1", Model)
                    @Html.EditorFor(model => model.Labors[i].Name, new { htmlAttributes = new { @class = "col-sm-2 requiredifnotremoved" } })
                    @Html.EditorFor(model => model.Labors[i].Desc, new { htmlAttributes = new { @class = "col-sm-2" } })
                    <div class="col-sm-2 "></div>
                    @Html.EditorFor(model => model.Labors[i].PPH, new { htmlAttributes = new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" } })
                    @Html.EditorFor(model => model.Labors[i].PPP, new { htmlAttributes = new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" } })
                    @Html.TextBoxFor(model => model.Labors[i].Qty, new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" })
                    <div id="LaborsRowTotalValue_@i" class="col-sm-1 LaborsRowTotal">@Model.Labors[i].Total.ToString("F02")</div>
                    <div class="col-sm-1">
                        @if (Model.Labors[i].SVMState != SVMStateEnum.Fixed)
                        {
                            @Html.Partial("_CostComponentLastCol", Model)
                        }
                    </div>

                </div>
                <div class="row">
                    @Html.ValidationMessageFor(model => model.Labors[i].Name, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Labors[i].PPH, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Labors[i].PPP, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Labors[i].Qty, "", new { @class = "text-danger" })
                </div>
            </div>
                        }
        <div id="LaborsTotal">
            <div class="row StyleComponentsRowFooter">
                <div class="col-sm-2"><b>TOTAL LABOR</b></div>
                <div class="col-sm-8"></div>
                <div id="LaborsTotalValue" class="col-sm-2">@Model.LaborsTotal.ToString("F02")</div>
            </div>
        </div>

    </div> <!-- Labors -->

    <div class="styleMiscs">
        <!-- Misc -->
        <div class="row StyleComponentsRowHeader">
            @{Model.CCLastRow = false; Model.CCHeaderRow = true; Model.CCRowIndex = -1; Model.SVMCCType = SVMCCTypeEnum.Miscs; }
            @if (Model.Miscs.Count == 0) { Model.CCLastRow = true; }
            @Html.Partial("_CostComponentCol1")
            <div class="col-sm-2">MISC</div>
            <div class="col-sm-2">Desc</div>
            <div class="col-sm-3"></div>
            <div class="col-sm-1">PRICE/PC</div>
            <div class="col-sm-1">QTY</div>
            <div class="col-sm-2">TOTAL</div>
        </div>
        @for (int i = 0; i < Model.Miscs.Count; i++)
        {
            Model.i = i;
            OJewelry.Models.MiscComponent c = Model.Miscs[i];
            <div class="MiscsState">@Html.HiddenFor(model => model.Miscs[i].SVMState)</div>
            var bHideRow = (Model.Miscs[i].SVMState == SVMStateEnum.Unadded || Model.Miscs[i].SVMState == SVMStateEnum.Deleted) ? "hidden" : "";
            <div id="MiscsRow_@i" class="MiscsRow @bHideRow">
                <div class="row ltbordered">
                    @{Model.CCLastRow = false; Model.CCHeaderRow = false; Model.CCRowIndex = i;}
                    @if (i == Model.Miscs.Count - 1) { Model.CCLastRow = true; Model.CCRowIndex = i; }
                    @Html.HiddenFor(model => model.Miscs[i].Id)
                    @Html.Partial("_CostComponentCol1", Model)
                    @Html.EditorFor(model => model.Miscs[i].Name, new { htmlAttributes = new { @class = "col-sm-2 requiredifnotremoved" } })
                    @Html.EditorFor(model => model.Miscs[i].Desc, new { htmlAttributes = new { @class = "col-sm-2" } })
                    <div class="col-sm-3 "></div>
                    @Html.EditorFor(model => model.Miscs[i].PPP, new { htmlAttributes = new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" } })
                    @Html.TextBoxFor(model => model.Miscs[i].Qty, new { @class = "col-sm-1", onblur = "CalcRowTotal('" + Model.SVMCCType + "', '" + i + "')" })
                    <div id="MiscsRowTotalValue_@i" class="col-sm-1 MiscsRowTotal">@Model.Miscs[i].Total.ToString("F02")</div>
                    <div class="col-sm-1">
                        @if (Model.Miscs[i].SVMState != SVMStateEnum.Fixed)
                        {
                            @Html.Partial("_CostComponentLastCol", Model)
                        }
                    </div>

                </div>
                <div class="row">
                    @Html.ValidationMessageFor(model => model.Miscs[i].Name, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Miscs[i].PPP, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Miscs[i].Qty, "", new { @class = "text-danger" })
                </div>
            </div>
                        }
        <div id="MiscsTotal">
            <div class="row StyleComponentsRowFooter">
                <div class="col-sm-2">TOTAL MISC</div>
                <div class="col-sm-8"></div>
                <div id="MiscsTotalValue" class="col-sm-2">@Model.MiscsTotal.ToString("F02")</div>
            </div>
        </div>
    </div> <!-- Misc -->

    <div class="row h3 StyleComponentsFooter">
        <div class="col-sm-2"><b>TOTAL COST</b></div>
        <div class="col-sm-8"></div>
        <div id="GrandTotal" class="col-sm-2">@Model.Total.ToString("F02")</div>
    </div>
    <div class="hidden">
        <div id="jsMetals">
            @{
                List<Stone> emptyStoneList = new List<Stone>();
                Stone stoneItem = new Stone() { Id = 1, Name = "" };
                emptyStoneList.Add(stoneItem);
                List<Finding> emptyFindingList = new List<Finding>();
                Finding findingItem = new Finding() { Id = 1, Name = "" };
                emptyFindingList.Add(findingItem);
            }
            @Html.DropDownList("jsmINDEX", new SelectList(Model.jsMetals, "Id", "Code", Model.jsMetals.FirstOrDefault().Id), new { @class = "col-sm-1" })
        </div>
        <div id="jsVendors">
            @Html.DropDownList("jsvINDEX", new SelectList(Model.jsVendors, "Id", "Name", Model.jsVendors.FirstOrDefault().Id), new { @class = "col-sm-2 " })
        </div>
        <div id="jsStones">
            @if (Model.jsStones.Count == 0)
            {
                @Html.DropDownList("jssINDEX", new SelectList(emptyStoneList, "Id", "Name", 1), new { @class = "col-sm-2 requiredifnotremoved" })
            }
            else
            {
                @*Model.jsStones.Insert(0, Model.DefStone);*@
                @Html.DropDownList("jssINDEX", new SelectList(Model.jsStones, "Id", "Name"), "Please select a stone", new { @class = "col-sm-2 requiredifnotremoved" })
            }
        </div>
        <div id="jsShapes">
            @if (Model.jsShapes.Count == 0)
            {
                @Html.DropDownList("jsshINDEX", new SelectList(emptyStoneList, "Id", "Name", 1), new { @class = "col-sm-1 requiredifnotremoved" })
            }
            else
            {
                @*Model.jsShapes.Insert(0, Model.DefStone);*@
                @Html.DropDownList("jsshINDEX", new SelectList(Model.jsShapes, "Id", "Name"), "Please select a shape", new { @class = "col-sm-1 requiredifnotremoved" })
            }
        </div>
        <div id="jsSizes">
            @if (Model.jsSizes.Count == 0)
            {
                @Html.DropDownList("jsszINDEX", new SelectList(emptyStoneList, "Id", "Name", 1), new { @class = "col-sm-1 requiredifnotremoved" })
            }
            else
            {
                @*Model.jsSizs.Insert(0, Model.DefStone);*@
                @Html.DropDownList("jsszINDEX", new SelectList(Model.jsSizes, "Id", "Name"), "Please select a size", new { @class = "col-sm-1 requiredifnotremoved" })
            }
        </div>
        <div id="jsFindings">
            @if (Model.jsFindings.Count == 0)
            {
                @Html.DropDownList("jsfINDEX", new SelectList(emptyFindingList, "Id", "Name"), new { @class = "col-sm-2 requiredifnotremoved" })
            }
            else
            {
                @*Model.jsFindings.Insert(0, Model.DefFinding);*@
                @Html.DropDownList("jsfINDEX", new SelectList(Model.jsFindings, "Id", "Name"), "Please select a finding", new { @class = "col-sm-2 requiredifnotremoved" })
            }
        </div>
        <div id="StonesData">
            @foreach (StoneListItem stone in Model.jsStones)
            {
                <div id="@stone.Id">
                    @*
                    <span class="VendorName" value="@stone.Vendor.Name"></span>
                    <span class="PPC" value="@stone.Price.ToString("F02")"></span>
                    *@
                </div>
            }
        </div>
        <div id="FindingsData">
            @foreach (Finding finding in Model.jsFindings)
            {
                <div id="@finding.Id">
                    <span class="VendorName" value="@finding.Vendor.Name"></span>
                    <span class="Weight" value="@finding.Weight"></span>
                    <span class="Price" value="@finding.Price.Value.ToString("F02")"></span>
                </div>
            }
        </div>
        <div id="DelBtnPos" BtnPos=@Model.DelBtnPos>

        </div>
    </div>
</div>
